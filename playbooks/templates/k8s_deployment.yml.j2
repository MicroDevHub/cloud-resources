# AUTO-GENERATED FILE - DO NOT EDIT
# Presently, we are encountering an issue concerning the synchronization between ConfigMaps, Secrets, and deployments.
# Our aim is to monitor any alterations in ConfigMaps and/or Secrets, and subsequently execute a rolling upgrade on the relevant resources,
# including DeploymentConfig, Deployment, DaemonSet, StatefulSet, and Rollout.
# However, this functionality is not yet fully implemented in Kubernetes
# (currently in progress, see https://github.com/kubernetes/kubernetes/issues/22368).
# As a temporary solution, we may consider utilizing https://github.com/stakater/Reloader/. (NOT CURRENTLY IMPLEMENTED)

{% for app_service in service_configs[catalog_config.name] %}
{% if app_service.name in configuration %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ app_service.name }}
data:
{% for key, value in configuration[app_service.name].items() %}
    {{ key }}: {{ value | to_nice_yaml(width=0, indent=4) }}
{% endfor %}
{% endif %}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ app_service.name }}
  labels:
    app: {{ app_service.name }}
spec:
  type: ClusterIP # more detail https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  ports:
    - name: http-{{ app_service.name }}
      protocol: TCP
      targetPort: {{ app_service.port }}
      port: {{ app_service.port }}
  selector:
    app: {{ app_service.name }}

---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: {{ app_service.name }}
  labels:
    app: {{ app_service.name }}
spec:
  replicas: {{ app_service.replicas | default(1) }}
  selector:
    matchLabels:
      app: {{ app_service.name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ app_service.name }}
    spec:
      containers:
        - image: "{{ Sts.DockerRegistry }}/{{ app_service.container_name }}:{{ app_service.container_tag }}"
          name: {{ app_service.name }}
{% if app_service.name in configuration %}
          env:
{% for key, value in configuration[app_service.name].items() %}
            - name: {{ key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ app_service.name }}
                  key: {{ key }}
{% endfor %}
{% endif %}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ app_service.name }}
  namespace: {{ namespace_name }}
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::{{ Sts.AccountId }}:role/ECRReadOnlyRole" # TODO should have a best way to get AWS_ROLE here instead of hard code

{% endfor %}
