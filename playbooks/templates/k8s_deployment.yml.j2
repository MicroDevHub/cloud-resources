# THIS FILE IS AUTO-GENERATED, PLEASE DO NOT EDIT

{% for app_service in service_configs %}
{% if app_service.name in configuration %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ app_service.name }}
data:
{% for key, value in configuration[app_service.name].items() %}
    {{ key }}: {{ value | to_nice_yaml(width=0, indent=4) }}
{% endfor %}
{% endif %}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ app_service.name }}
  labels:
    app: {{ app_service.name }}
spec:
  type: NodePort
  ports:
    - name: http-{{app_service.name}}
      protocol: TCP
      nodePort: {{ app_service.nodePort }}
      port: {{ app_service.port }}
  selector:
    app: {{ app_service.name }}

---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: {{ app_service.name }}
  labels:
    app: {{ app_service.name }}
spec:
  replicas: {{ app_service.replicas }}
  selector:
    matchLabels:
      app: {{ app_service.name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ app_service.name }}
    spec:
      containers:
        - image: "{{ Sts.DockerRegistry }}/{{ app_service.container_name }}:{{ app_service.container_tag }}"
          name: {{ app_service.name }}
          env:
            - name: CONFIG_MAP_KEY
              value: /etc/config/{{ app_service.name }}.yaml
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: {{ app_service.name }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ app_service.name }}
  namespace: {{ namespace_name }}
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::{{ Sts.AccountId }}:role/ECRReadOnlyRole" # TODO should have a best way to get AWS_ROLE here instead of hard code

{% endfor %}
